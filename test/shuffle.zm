/******************************************************************************\
FILE:           shuffle.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Item table shuffling functions.


HISTORY:
2013-01-11 TV   Created.

\******************************************************************************/


// Shuffles specified block in fam_items table (no restrictions on item order).
int shuffle_fam_items(int blk)
{
    fam_items[blk].shuffle(0, -1);

    return OK;
}


//------------------------------------------------------------------------------


// Shuffles specified block in test_items table (no restrictions on item order).
int shuffle_test_items(int blk)
{
    test_items[blk].shuffle(0, -1);

    return OK;
}


//------------------------------------------------------------------------------


// Shuffles test_list_order table according to following criterion:
//   - The first item must be familiar.
//   - The maximum number of subsequent novel items is 2.
int shuffle_test_list_order()
{
    int nitems = test_list_order.size;
    TestGroup familiar = selected_group;
    TestGroup novel = (selected_group == L1) ? L2 : L1;

    // Depending on criteria and table contents it may happen that it takes
    // several attempts to make the shuffling succeed. We'll try it 100 times
    // before giving up.
    int nattempts;
    bool again = true;
    while (again && ++nattempts < 100) 
    {
        // First shuffle the entire item table.
        again = false;
        test_list_order.shuffle(0, -1);

        // First item must be familiar, so reshuffle if necessary.
        while (test_list_order[0] != familiar)
            test_list_order.shuffle(0, -1);

        // Walk over the table and check for items conflicting with the
        // criterion. If an item conflicts, then swap it randomly with one 
        // of the items not yet looked at.
        int n = 2;
        while (n < nitems)
        {
            int nitemswaps;
            while (
                test_list_order[n] == novel && 
                test_list_order[n-1] == novel && 
                test_list_order[n-2] == novel)
            {
                if (n+1 == nitems || ++nitemswaps == 10) 
                {
                    again = true;
                    break;
                }
                test_list_order.swap(n, random(n, nitems - n));
            }
            if (again) break;
            n++;
        }
    }

    if (again)
        println("Unable to shuffle test_list_order according to criteria. "
            "Check table and/or criteria.");

    return again ? ERROR : OK;
}


// Prints test_list_order table contents in terminal window.
void dump_test_list_order()
{
    int nitems = test_list_order.size;

    int n;
    while (n < nitems)
    {
        println(string(test_list_order[n]));
        n++;
    }
    println("");
}
